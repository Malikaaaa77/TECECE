{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Malik\\\\Documents\\\\TUGAS\\\\Semester 6\\\\TCC\\\\ProjekTCCTeori\\\\frontend\\\\src\\\\api\\\\index.js\";\nimport React from 'react';\nimport { createRoot } from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport api, { healthCheck } from './api'; // Import the api and healthCheck function\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst container = document.getElementById('root');\nconst root = createRoot(container);\n\n// Perform health check on app start\nhealthCheck().then(data => {\n  console.log('✅ Health check passed:', data);\n  // Proceed to render the app only if health check is successful\n  root.render(/*#__PURE__*/_jsxDEV(React.StrictMode, {\n    children: /*#__PURE__*/_jsxDEV(App, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 17,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 16,\n    columnNumber: 7\n  }, this));\n}).catch(error => {\n  console.error('❌ Health check failed:', error);\n  // Optionally, you can render an error boundary or a fallback UI here\n});","map":{"version":3,"names":["React","createRoot","App","api","healthCheck","jsxDEV","_jsxDEV","container","document","getElementById","root","then","data","console","log","render","StrictMode","children","fileName","_jsxFileName","lineNumber","columnNumber","catch","error"],"sources":["C:/Users/Malik/Documents/TUGAS/Semester 6/TCC/ProjekTCCTeori/frontend/src/api/index.js"],"sourcesContent":["import React from 'react';\r\nimport { createRoot } from 'react-dom/client';\r\nimport './index.css';\r\nimport App from './App';\r\nimport api, { healthCheck } from './api'; // Import the api and healthCheck function\r\n\r\nconst container = document.getElementById('root');\r\nconst root = createRoot(container);\r\n\r\n// Perform health check on app start\r\nhealthCheck()\r\n  .then((data) => {\r\n    console.log('✅ Health check passed:', data);\r\n    // Proceed to render the app only if health check is successful\r\n    root.render(\r\n      <React.StrictMode>\r\n        <App />\r\n      </React.StrictMode>\r\n    );\r\n  })\r\n  .catch((error) => {\r\n    console.error('❌ Health check failed:', error);\r\n    // Optionally, you can render an error boundary or a fallback UI here\r\n  });"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,SAASC,UAAU,QAAQ,kBAAkB;AAC7C,OAAO,aAAa;AACpB,OAAOC,GAAG,MAAM,OAAO;AACvB,OAAOC,GAAG,IAAIC,WAAW,QAAQ,OAAO,CAAC,CAAC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,SAAS,GAAGC,QAAQ,CAACC,cAAc,CAAC,MAAM,CAAC;AACjD,MAAMC,IAAI,GAAGT,UAAU,CAACM,SAAS,CAAC;;AAElC;AACAH,WAAW,CAAC,CAAC,CACVO,IAAI,CAAEC,IAAI,IAAK;EACdC,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEF,IAAI,CAAC;EAC3C;EACAF,IAAI,CAACK,MAAM,cACTT,OAAA,CAACN,KAAK,CAACgB,UAAU;IAAAC,QAAA,eACfX,OAAA,CAACJ,GAAG;MAAAgB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CACpB,CAAC;AACH,CAAC,CAAC,CACDC,KAAK,CAAEC,KAAK,IAAK;EAChBV,OAAO,CAACU,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;EAC9C;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module"}